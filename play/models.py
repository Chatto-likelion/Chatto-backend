from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone

# Create your models here.
class ChatPlay(models.Model):
    chat_id = models.AutoField(primary_key=True)
    title = models.TextField()
    file = models.FileField(upload_to='chat_files_play/')
    people_num = models.IntegerField()
    uploaded_at = models.DateTimeField(default=timezone.now)
    user = models.ForeignKey(User, on_delete=models.CASCADE, default=None)

class ResultPlayChem(models.Model):
    result_id = models.AutoField(primary_key=True)
    type = models.IntegerField(default=0)
    title = models.TextField(default = "")
    people_num = models.IntegerField(default=0)
    is_saved = models.BooleanField(default=False)
    relationship = models.TextField(default="")
    situation = models.TextField(default="")
    analysis_date_start = models.TextField(default="")
    analysis_date_end = models.TextField(default="")
    created_at = models.DateTimeField(default=timezone.now)
    chat = models.ForeignKey(ChatPlay, on_delete=models.SET_NULL, null=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE, default=None)

class ResultPlaySome(models.Model):
    result_id = models.AutoField(primary_key=True)
    type = models.IntegerField(default=0)
    title = models.TextField(default = "")
    people_num = models.IntegerField(default=0)
    is_saved = models.BooleanField(default=False)
    relationship = models.TextField(default="")
    age = models.TextField(default="")
    analysis_date_start = models.TextField(default="")
    analysis_date_end = models.TextField(default="")
    created_at = models.DateTimeField(default=timezone.now)
    chat = models.ForeignKey(ChatPlay, on_delete=models.SET_NULL, null=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE, default=None)

class ResultPlayMBTI(models.Model):
    result_id = models.AutoField(primary_key=True)
    type = models.IntegerField(default=0)
    title = models.TextField(default = "")
    people_num = models.IntegerField(default=0)
    is_saved = models.BooleanField(default=False)
    analysis_date_start = models.TextField(default="")
    analysis_date_end = models.TextField(default="")
    created_at = models.DateTimeField(default=timezone.now)
    chat = models.ForeignKey(ChatPlay, on_delete=models.SET_NULL, null=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE, default=None)

class ResultPlayChemSpec(models.Model):
    spec_id = models.AutoField(primary_key=True)
    result = models.ForeignKey(ResultPlayChem, on_delete=models.CASCADE)
    score_main = models.IntegerField(default=0)
    summary_main = models.TextField(default="")
    tablesize = models.IntegerField(default=0)
    top1_A = models.TextField(default="")
    top1_B = models.TextField(default="")
    top1_score = models.IntegerField(default=0)
    top1_comment = models.TextField(default="")
    top2_A = models.TextField(default="")
    top2_B = models.TextField(default="")
    top2_score = models.IntegerField(default=0)
    top2_comment = models.TextField(default="")
    top3_A = models.TextField(default="")
    top3_B = models.TextField(default="")
    top3_score = models.IntegerField(default=0)
    top3_comment = models.TextField(default="")
    tone_pos = models.IntegerField(default=0)
    tone_humer = models.IntegerField(default=0)
    tone_else = models.IntegerField(default=0)
    tone_ex = models.TextField(default="")
    resp_time = models.IntegerField(default=0)
    resp_ratio = models.IntegerField(default=0)
    ignore = models.IntegerField(default=0)
    resp_analysis = models.TextField(default="")
    topic1 = models.TextField(default="")
    topic1_ratio = models.IntegerField(default=0)
    topic2 = models.TextField(default="")
    topic2_ratio = models.IntegerField(default=0)
    topic3 = models.TextField(default="")
    topic3_ratio = models.IntegerField(default=0)
    topic4 = models.TextField(default="")
    topic4_ratio = models.IntegerField(default=0)
    topicelse_ratio = models.IntegerField(default=0)
    chatto_analysis = models.TextField(default="")
    chatto_levelup = models.TextField(default="")
    chatto_levelup_tips = models.TextField(default="")
    name_0 = models.TextField(default="")
    name_1 = models.TextField(default="")
    name_2 = models.TextField(default="")
    name_3 = models.TextField(default="")
    name_4 = models.TextField(default="")

class ResultPlayChemSpecTable(models.Model):
    spectable_id = models.AutoField(primary_key=True)
    spec = models.ForeignKey(ResultPlayChemSpec, on_delete=models.CASCADE)
    row = models.IntegerField(default=0)
    column = models.IntegerField(default=0)
    interaction = models.IntegerField(default=0)

class ResultPlaySomeSpec(models.Model):
    spec_id = models.AutoField(primary_key=True)
    result = models.ForeignKey(ResultPlaySome, on_delete=models.CASCADE)
    score_main = models.IntegerField(default=0)
    comment_main = models.TextField(default="")
    score_A = models.IntegerField(default=0)
    score_B = models.IntegerField(default=0)
    trait_A = models.TextField(default="")
    trait_B = models.TextField(default="")
    summary = models.TextField(default="")
    tone = models.IntegerField(default=0)
    tone_desc = models.TextField(default="")
    tone_ex = models.TextField(default="")
    emo = models.IntegerField(default=0)
    emo_desc = models.TextField(default="")
    emo_ex = models.TextField(default="")
    addr = models.IntegerField(default=0)
    addr_desc = models.TextField(default="")
    addr_ex = models.TextField(default="")
    reply_A = models.IntegerField(default=0)
    reply_B = models.IntegerField(default=0)
    reply_A_desc = models.TextField(default="")
    reply_B_desc = models.TextField(default="")
    rec_A = models.IntegerField(default=0)
    rec_B = models.IntegerField(default=0)
    rec_A_desc = models.TextField(default="")   
    rec_B_desc = models.TextField(default="")
    rec_A_ex = models.TextField(default="")
    rec_B_ex = models.TextField(default="")
    atti_A = models.IntegerField(default=0)
    atti_B = models.IntegerField(default=0)
    atti_A_desc = models.TextField(default="")
    atti_B_desc = models.TextField(default="")
    atti_A_ex = models.TextField(default="")
    atti_B_ex = models.TextField(default="")
    pattern_analysis = models.TextField(default="")
    chatto_counsel = models.TextField(default="")
    chatto_counsel_tips = models.TextField(default="")

class ResultPlayMBTISpec(models.Model):
    spec_id = models.AutoField(primary_key=True)
    result = models.ForeignKey(ResultPlayMBTI, on_delete=models.CASCADE)
    total_I = models.IntegerField(default=0)
    total_E = models.IntegerField(default=0)
    total_S = models.IntegerField(default=0)
    total_N = models.IntegerField(default=0)
    total_F = models.IntegerField(default=0)
    total_T = models.IntegerField(default=0)
    total_J = models.IntegerField(default=0)
    total_P = models.IntegerField(default=0)

class ResultPlayMBTISpecPersonal(models.Model):
    specpersonal_id = models.AutoField(primary_key=True)
    spec = models.ForeignKey(ResultPlayMBTISpec, on_delete=models.CASCADE)
    name = models.TextField(default="")
    MBTI = models.TextField(default="")
    summary = models.TextField(default="")
    desc = models.TextField(default="")
    position = models.TextField(default="")
    personality = models.TextField(default="")
    style = models.TextField(default="")
    moment_ex = models.TextField(default="")
    moment_desc = models.TextField(default="")
    momentIE_ex = models.TextField(default="")
    momentIE_desc = models.TextField(default="")
    momentSN_ex = models.TextField(default="")
    momentSN_desc = models.TextField(default="")
    momentFT_ex = models.TextField(default="")
    momentFT_desc = models.TextField(default="")
    momentJP_ex = models.TextField(default="")
    momentJP_desc = models.TextField(default="")

class ChemQuiz(models.Model):
    quiz_id = models.AutoField(primary_key=True)
    result = models.OneToOneField(ResultPlayChem, on_delete=models.CASCADE)
    question_num = models.IntegerField(default=0)
    solved_num = models.IntegerField(default=0)
    avg_score = models.IntegerField(default=0)

class ChemQuizQuestion(models.Model):
    question_id = models.AutoField(primary_key=True)
    quiz = models.ForeignKey(ChemQuiz, on_delete=models.CASCADE)
    question_index = models.IntegerField(default=0)
    question = models.TextField(default="")
    choice1 = models.TextField(default="")
    choice2 = models.TextField(default="")
    choice3 = models.TextField(default="")
    choice4 = models.TextField(default="")
    answer = models.IntegerField(default=0)
    correct_num = models.IntegerField(default=0)
    count1 = models.IntegerField(default=0)
    count2 = models.IntegerField(default=0)
    count3 = models.IntegerField(default=0)
    count4 = models.IntegerField(default=0)

class ChemQuizPersonal(models.Model):
    QP_id = models.AutoField(primary_key=True)
    quiz = models.ForeignKey(ChemQuiz, on_delete=models.CASCADE)
    name = models.TextField(default="")
    score = models.IntegerField(default=0)

class ChemQuizPersonalDetail(models.Model):
    QPD_id = models.AutoField(primary_key=True)
    QP = models.ForeignKey(ChemQuizPersonal, on_delete=models.CASCADE)
    question = models.ForeignKey(ChemQuizQuestion, on_delete=models.CASCADE)
    response = models.IntegerField(default=0)
    result = models.BooleanField(default=False)

class SomeQuiz(models.Model):
    quiz_id = models.AutoField(primary_key=True)
    result = models.OneToOneField(ResultPlaySome, on_delete=models.CASCADE)
    question_num = models.IntegerField(default=0)
    solved_num = models.IntegerField(default=0)
    avg_score = models.IntegerField(default=0)

class SomeQuizQuestion(models.Model):
    question_id = models.AutoField(primary_key=True)
    quiz = models.ForeignKey(SomeQuiz, on_delete=models.CASCADE)
    question_index = models.IntegerField(default=0)
    question = models.TextField(default="")
    choice1 = models.TextField(default="")
    choice2 = models.TextField(default="")
    choice3 = models.TextField(default="")
    choice4 = models.TextField(default="")
    answer = models.IntegerField(default=0)
    correct_num = models.IntegerField(default=0)
    count1 = models.IntegerField(default=0)
    count2 = models.IntegerField(default=0)
    count3 = models.IntegerField(default=0)
    count4 = models.IntegerField(default=0)

class SomeQuizPersonal(models.Model):
    QP_id = models.AutoField(primary_key=True)
    quiz = models.ForeignKey(SomeQuiz, on_delete=models.CASCADE)
    name = models.TextField(default="")
    score = models.IntegerField(default=0)

class SomeQuizPersonalDetail(models.Model):
    QPD_id = models.AutoField(primary_key=True)
    QP = models.ForeignKey(SomeQuizPersonal, on_delete=models.CASCADE)
    question = models.ForeignKey(SomeQuizQuestion, on_delete=models.CASCADE)
    response = models.IntegerField(default=0)
    result = models.BooleanField(default=False)

class MBTIQuiz(models.Model):
    quiz_id = models.AutoField(primary_key=True)
    result = models.OneToOneField(ResultPlayMBTI, on_delete=models.CASCADE)
    question_num = models.IntegerField(default=0)
    solved_num = models.IntegerField(default=0)
    avg_score = models.IntegerField(default=0)

class MBTIQuizQuestion(models.Model):
    question_id = models.AutoField(primary_key=True)
    quiz = models.ForeignKey(MBTIQuiz, on_delete=models.CASCADE)
    question_index = models.IntegerField(default=0)
    question = models.TextField(default="")
    choice1 = models.TextField(default="")
    choice2 = models.TextField(default="")
    choice3 = models.TextField(default="")
    choice4 = models.TextField(default="")
    answer = models.IntegerField(default=0)
    correct_num = models.IntegerField(default=0)
    count1 = models.IntegerField(default=0)
    count2 = models.IntegerField(default=0)
    count3 = models.IntegerField(default=0)
    count4 = models.IntegerField(default=0)

class MBTIQuizPersonal(models.Model):
    QP_id = models.AutoField(primary_key=True)
    quiz = models.ForeignKey(MBTIQuiz, on_delete=models.CASCADE)
    name = models.TextField(default="")
    score = models.IntegerField(default=0)

class MBTIQuizPersonalDetail(models.Model):
    QPD_id = models.AutoField(primary_key=True)
    QP = models.ForeignKey(MBTIQuizPersonal, on_delete=models.CASCADE)
    question = models.ForeignKey(MBTIQuizQuestion, on_delete=models.CASCADE)
    response = models.IntegerField(default=0)
    result = models.BooleanField(default=False)
